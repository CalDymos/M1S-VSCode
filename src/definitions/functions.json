{
  "Abs": {
    "label": "Function Abs(expr as Integer) as Integer",
    "documentation": "Returns the absolute value of a number.",
    "params": [
      {
        "label": "expr",
        "documentation": "Any valid numeric expression."
      }
    ]
  },
  "Asc": {
    "label": "Function Asc(char as String) as Integer",
    "documentation": "Returns the unicode code of a character.",
    "params": [
      {
        "label": "char",
        "documentation": "The character to get the code for. If a string is used, the code for the first character is given."
      }
    ]
  },
  "AscB": {
    "label": "AscB",
    "documentation": "Returns the ANSI character code corresponding to the first letter in a string."
  },
  "AscW": {
    "label": "AscW",
    "documentation": "Function that returns the Unicode (wide) character code that represents a specific Unicode character."
  },
  "Atn": {
    "label": "Atn",
    "documentation": "Returns the arctangent of a number."
  },
  "CBool": {
    "label": "CBool",
    "documentation": "Returns an expression that has been converted to a Variant of subtype Boolean."
  },
  "CByte": {
    "label": "CByte",
    "documentation": ""
  },
  "CCur": {
    "label": "CCur",
    "documentation": ""
  },
  "CDate": {
    "label": "CDate",
    "documentation": ""
  },
  "CDbl": {
    "label": "CDbl",
    "documentation": ""
  },
  "Chr": {
    "label": "Chr",
    "documentation": ""
  },
  "ChrB": {
    "label": "ChrB",
    "documentation": ""
  },
  "ChrW": {
    "label": "ChrW",
    "documentation": ""
  },
  "CInt": {
    "label": "CInt",
    "documentation": ""
  },
  "CLng": {
    "label": "CLng",
    "documentation": ""
  },
  "Cos": {
    "label": "Cos",
    "documentation": ""
  },
  "CreateObject": {
    "label": "CreateObject",
    "documentation": ""
  },
  "CSng": {
    "label": "CSng",
    "documentation": ""
  },
  "CStr": {
    "label": "CStr",
    "documentation": ""
  },
  "DateAdd": {
    "label": "DateAdd(interval, number, date)",
    "documentation": ""
  },
  "DateDiff": {
    "label": "DateDiff(interval, date1, date2 [,firstdayofweek[, firstweekofyear]])",
    "documentation": "Returns the number of intervals between two dates.",
    "params": [
      {
        "label": "interval",
        "documentation": "Required. String expression that is the interval you want to use to calculate the differences between date1 and date2. See Settings section for values."
      },
      {
        "label": "date1",
        "documentation": "Required. Date expressions. Two dates you want to use in the calculation."
      },
      {
        "label": "date2",
        "documentation": "Required. Date expressions. Two dates you want to use in the calculation.."
      },
      {
        "label": "firstdayofweek",
        "documentation": "Optional. Constant that specifies the day of the week. If not specified, Sunday is assumed. See Settings section for values."
      },
      {
        "label": "firstweekofyear",
        "documentation": "Optional. Constant that specifies the first week of the year. If not specified, the first week is assumed to be the week in which January 1 occurs. See Settings section for values."
      }
    ]
  },
  "DatePart": {
    "label": "DatePart",
    "documentation": ""
  },
  "DateSerial": {
    "label": "DateSerial",
    "documentation": ""
  },
  "DateValue": {
    "label": "DateValue",
    "documentation": ""
  },
  "Day": {
    "label": "Day",
    "documentation": ""
  },
  "Double": {
    "label": "Double",
    "documentation": ""
  },
  "Escape": {
    "label": "Escape",
    "documentation": ""
  },
  "Eval": {
    "label": "Eval",
    "documentation": ""
  },
  "Exp": {
    "label": "Exp",
    "documentation": ""
  },
  "Filter": {
    "label": " Filter(InputStrings, Value[, Include[, Compare]])",
    "documentation": "Returns a zero-based array containing a subset of a string array based on a specified filter criteria."
  },
  "Fix": {
    "label": "Fix",
    "documentation": ""
  },
  "FormatCurrency": {
    "label": "FormatCurrency",
    "documentation": ""
  },
  "FormatDateTime": {
    "label": "FormatDateTime",
    "documentation": ""
  },
  "FormatNumber": {
    "label": "FormatNumber",
    "documentation": ""
  },
  "FormatPercent": {
    "label": "FormatPercent",
    "documentation": ""
  },
  "GetObject": {
    "label": "GetObject",
    "documentation": ""
  },
  "GetRef": {
    "label": "GetRef",
    "documentation": ""
  },
  "Hex": {
    "label": "Hex",
    "documentation": ""
  },
  "Hour": {
    "label": "Hour",
    "documentation": ""
  },
  "InputBox": {
    "label": "Function InputBox(prompt As String[, title As String][, default As String][, xpos][, ypos][, helpfile, context]) As String",
    "documentation": "Displays a prompt in a dialog box, waits for the user to input text or click a button, and returns the contents of the text box."
  },
  "InStr": {
    "label": "InStr([start, ]string1, string2[, compare])",
    "documentation": "Returns the position of the first occurrence of one string within another."
  },
  "InStrB": {
    "label": "InStrB",
    "documentation": ""
  },
  "InStrRev": {
    "label": "InStrRev",
    "documentation": ""
  },
  "Int": {
    "label": "Int",
    "documentation": ""
  },
  "IsArray": {
    "label": "IsArray",
    "documentation": ""
  },
  "IsDate": {
    "label": "IsDate",
    "documentation": ""
  },
  "IsEmpty": {
    "label": "IsEmpty",
    "documentation": ""
  },
  "IsNull": {
    "label": "IsNull",
    "documentation": ""
  },
  "IsNumeric": {
    "label": "IsNumeric(expression) as Boolean",
    "documentation": "Returns a Boolean value indicating whether an expression can be evaluated as a number."
  },
  "IsObject": {
    "label": "IsObject",
    "documentation": ""
  },
  "Join": {
    "label": "Join",
    "documentation": ""
  },
  "LBound": {
    "label": "LBound",
    "documentation": ""
  },
  "LCase": {
    "label": "LCase",
    "documentation": ""
  },
  "Left": {
    "label": "Left",
    "documentation": ""
  },
  "LeftB": {
    "label": "LeftB",
    "documentation": ""
  },
  "Len": {
    "label": "Len",
    "documentation": ""
  },
  "LenB": {
    "label": "LenB",
    "documentation": ""
  },
  "LoadPicture": {
    "label": "LoadPicture",
    "documentation": ""
  },
  "Log": {
    "label": "Log",
    "documentation": ""
  },
  "LTrim": {
    "label": "LTrim",
    "documentation": ""
  },
  "Me": {
    "documentation": ""
  },
  "Mid": {
    "label": "Mid(string, start[, length])",
    "documentation": "Returns a specified number of characters from a string."
  },
  "MidB": {
    "label": "MidB",
    "documentation": ""
  },
  "Minute": {
    "label": "Minute",
    "documentation": ""
  },
  "Month": {
    "label": "Month",
    "documentation": ""
  },
  "MonthName": {
    "label": "MonthName",
    "documentation": ""
  },
  "MsgBox": {
    "label": "MsgBox(prompt[, buttons][, title][, helpfile, context])",
    "documentation": "Displays a message in a dialog box, waits for the user to click a button, and returns a value indicating which button the user clicked.",
    "params": [
      {
        "label": "prompt",
        "documentation": "String expression displayed as the message in the dialog box. The maximum length of prompt is approximately 1024 characters, depending on the width of the characters used. If prompt consists of more than one line, you can separate the lines using a carriage return character (Chr(13)), a linefeed character (Chr(10)), or carriage returnâ€“linefeed character combination (Chr(13) & Chr(10)) between each line."
      },
      {
        "label": "buttons",
        "documentation": "Numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. See Settings section for values. If omitted, the default value for buttons is 0."
      },
      {
        "label": "title",
        "documentation": "String expression displayed in the title bar of the dialog box. If you omit title, the application name is placed in the title bar."
      },
      {
        "label": "helpfile",
        "documentation": "String expression that identifies the Help file to use to provide context-sensitive Help for the dialog box. If helpfile is provided, context must also be provided. Not available on 16-bit platforms."
      },
      {
        "label": "context",
        "documentation": "Numeric expression that identifies the Help context number assigned by the Help author to the appropriate Help topic. If context is provided, helpfile must also be provided. Not available on 16-bit platforms."
      }
    ]
  },
  "Oct": {
    "label": "Oct",
    "documentation": ""
  },
  "Replace": {
    "label": "Replace",
    "documentation": ""
  },
  "RGB": {
    "label": "RGB",
    "documentation": ""
  },
  "Right": {
    "label": "Right",
    "documentation": ""
  },
  "RightB": {
    "label": "RightB",
    "documentation": ""
  },
  "Rnd": {
    "label": "Rnd",
    "documentation": ""
  },
  "Round": {
    "label": "Round",
    "documentation": ""
  },
  "RTrim": {
    "label": "RTrim",
    "documentation": ""
  },
  "Second": {
    "label": "Second",
    "documentation": ""
  },
  "SetLocale": {
    "label": "Function SetLocale(integer) as Integer",
    "documentation": "undocumented"
  },
  "Sgn": {
    "label": "Sgn",
    "documentation": ""
  },
  "Sin": {
    "label": "Sin",
    "documentation": ""
  },
  "Space": {
    "label": "Space",
    "documentation": ""
  },
  "Split": {
    "label": "Split(expression[, delimiter[, count[, compare]]])",
    "documentation": ""
  },
  "Sqr": {
    "label": "Sqr",
    "documentation": ""
  },
  "StrComp": {
    "label": "StrComp",
    "documentation": ""
  },
  "StrReverse": {
    "label": "StrReverse",
    "documentation": ""
  },
  "Tan": {
    "label": "Tan",
    "documentation": ""
  },
  "TimeSerial": {
    "label": "TimeSerial",
    "documentation": ""
  },
  "TimeValue": {
    "label": "TimeValue",
    "documentation": ""
  },
  "Trim": {
    "label": "Trim",
    "documentation": ""
  },
  "True": {
    "label": "True",
    "documentation": ""
  },
  "TypeName": {
    "label": "TypeName",
    "documentation": ""
  },
  "UBound": {
    "label": "UBound",
    "documentation": "Returns the largest available subscript for the indicated dimension of an array."
  },
  "UCase": {
    "label": "Function UCase(String As String) As String",
    "documentation": "Returns a string that has been converted to uppercase."
  },
  "Unescape": {
    "label": "Unescape",
    "documentation": ""
  },
  "VarType": {
    "label": "VarType",
    "documentation": ""
  },
  "Weekday": {
    "label": "Weekday",
    "documentation": ""
  },
  "WeekdayName": {
    "label": "WeekdayName",
    "documentation": ""
  },
  "Year": {
    "label": "Year",
    "documentation": ""
  },
  "Err.Raise": {
    "documentation": ""
  },
  "Debug.Write": {
    "documentation": ""
  },
  "Debug.WriteLine": {
    "documentation": ""
  },
  "RegExp.Execute": {
    "documentation": ""
  },
  "RegExp.Replace": {
    "documentation": ""
  },
  "RegExp.Test": {
    "documentation": ""
  },
  "WScript.CreateObject": {},
  "WScript.ConnectObject": {},
  "WScript.DisconnectObject": {},
  "WScript.Echo": {},
  "WScript.GetObject": {},
  "WScript.Quit": {},
  "WScript.Sleep": {}
}